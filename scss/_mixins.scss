//
// Mixins, Shortcuts & The Grid
// --------------------------------------------------

// Grid
// -------------------

// Function to strip units from variables temporarily for calculations

@function stripUnits($value) {
    @return $value / ($value * 0 + 1);
}

$columnSize: ($containerWidth / $columnCount) * (1 - stripUnits($gutterRatio) / 100);


$gutterWidth: ($containerWidth / $columnCount) - $columnSize;

@mixin container() {
    width: $columnSize * $columnCount + $gutterWidth * $columnCount;
}


@mixin absoluteContainer() {
    width: $columnSize * $columnCount + $gutterWidth * $columnCount;
    position: absolute;
    top: 0;
    left: 50%;
    margin-left: -(($columnSize * $columnCount + $gutterWidth * $columnCount) / 2);
}

@mixin column($columns: 1, $offset: 0){
    $columns: $columns;
    $offset: $offset;
    
    @if ($columnCount >= ($columns + $offset)) {
        $consideredColumns: ($columnCount * $columns) / $columnCount;
    }
    
    @elseif ($columnCount < ($columns + $offset)) {
        $consideredColumns: ($columnCount * $columns) / $columns;
        $offset: 0;
    }
    
    $offsetWidth: $columnSize * $offset + $gutterWidth * $offset;
    $width: ($columnSize * $consideredColumns) + ($gutterWidth * ($consideredColumns - 1));
    $unit: $columnSize - $columnSize;

    // add Sass method floor() to round down to nearest pixel - avoid sub-pixel issues on eg Firefox for custom column widths

    float: left;
    width: $width;
    margin-left: floor($offsetWidth + $gutterWidth/2);
    margin-right: floor($gutterWidth / 2);

}


// Useful Visual Elements
// -------------------

@mixin arrow-up($size: 5px, $color: #000) {
    width: 0; 
    height: 0; 
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
}
@mixin arrow-down($size: 5px, $color: #000) {
    width: 0; 
    height: 0; 
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
}
@mixin arrow-left($size: 5px, $color: #000) {
    width: 0; 
    height: 0; 
    border-top: $size solid transparent;
    border-bottom: $size solid transparent; 
    border-right: $size solid $color; 
}
@mixin arrow-right($size: 5px, $color: #000) {
    width: 0; 
    height: 0; 
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
}

// Custom Buttons

@mixin button-style($customColor, $customTextColor){
    background: $customColor;
    color: $customTextColor;
     &:hover {
        background: darken($customColor, 3%);
        text-decoration: none;
    }
    
    &:active {
        background: darken($customColor, 6%);
    }

    &.disabled {
        background: lighten($customColor, 2.5%);
        color: darken($customColor, 15%);
        cursor: default;
    }

}



// Shortcuts
// -------------------

@mixin size($height, $width) {
    width: $width;
    height: $height;
}
@mixin hide-text() {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
}
@mixin font($size: 100%, $weight: normal, $lineHeight: 150%) {
    font-size: $size;
    font-weight: $weight;
    line-height: $lineHeight;
}
@mixin inline-block() {
    display: inline-block;
    zoom: 1;
    *display: inline; // For IE 7 support
}


// CSS3 Prefixes
// -------------------

// Animation

@mixin animation($args) {
    -webkit-animation: $args;
    -moz-animation: $args;
    -ms-animation: $args;
    -o-animation: $args;
}
@mixin animation-delay($delay) {
    -webkit-animation-delay: $delay;
    -moz-animation-delay: $delay;
    -ms-animation-delay: $delay;
    -o-animation-delay: $delay;
}
@mixin animation-direction($direction) {
    -webkit-animation-direction: $direction;
    -moz-animation-direction: $direction;
    -ms-animation-direction: $direction;
    -o-animation-direction: $direction;
}
@mixin animation-duration($duration) {
    -webkit-animation-duration: $duration;
    -moz-animation-duration: $duration;
    -ms-animation-duration: $duration;
    -o-animation-duration: $duration;
}
@mixin animation-iteration-count($count) {
    -webkit-animation-iteration-count: $count;
    -moz-animation-iteration-count: $count;
    -ms-animation-iteration-count: $count;
    -o-animation-iteration-count: $count;
}
@mixin animation-name($name) {
    -webkit-animation-name: $name;
    -moz-animation-name: $name;
    -ms-animation-name: $name;
    -o-animation-name: $name;
}
@mixin animation-play-state($state) {
    -webkit-animation-play-state: $state;
    -moz-animation-play-state: $state;
    -ms-animation-play-state: $state;
    -o-animation-play-state: $state;
}
@mixin animation-timing-function($function) {
    -webkit-animation-timing-function: $function;
    -moz-animation-timing-function: $function;
    -ms-animation-timing-function: $function;
    -o-animation-timing-function: $function;
}


// Background Size

@mixin background-size($args) {
    -webkit-background-size: $args;
    -moz-background-size: $args;
    -o-background-size: $args;
    background-size: $args;
}

// Box Shadows 

@mixin box-shadow($args) {
    -webkit-box-shadow: $args;
    -moz-box-shadow: $args;
    box-shadow: $args;
}
@mixin inner-shadow($args) {
    @include box-shadow(inset $args);
}

// Box Sizing

@mixin box-sizing($args) {
    -webkit-box-sizing: $args;
    -moz-box-sizing: $args;
    box-sizing: $args;
}

// Columns

@mixin columns($args) {
    -webkit-columns: $args;
    -moz-columns: $args;
    columns: $args;
}
@mixin column-count($count) {
    -webkit-column-count: $count;
    -moz-column-count: $count;
    column-count: $count;
}
@mixin column-gap($gap) {
    -webkit-column-gap: $gap;
    -moz-column-gap: $gap;
    column-gap: $gap;
}
@mixin column-width($width) {
    -webkit-column-width: $width;
    -moz-column-width: $width;
    column-width: $width;
}
@mixin column-rule($args) {
    -webkit-column-rule: $rule;
    -moz-column-rule: $rule;
    column-rule: $rule;
}

// Gradients

@mixin gradient-horizontal($startColor: #555, $endColor: #333) {
    background-color: $endColor;
    background-image: -moz-linear-gradient(left, $startColor, $endColor); // FF 3.6+
    background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
    background-image: -webkit-linear-gradient(left, $startColor, $endColor); // Safari 5.1+, Chrome 10+
    background-image: -o-linear-gradient(left, $startColor, $endColor); // Opera 11.10
    background-image: linear-gradient(to right, $startColor, $endColor); // Standard, IE10
    background-repeat: repeat-x;
//    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb($startColor),argb($endColor))); // IE9 and down
}
@mixin gradient-vertical($startColor: #555, $endColor: #333) {
    background-color: mix($startColor, $endColor, 60%);
    background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
    background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
    background-image: -o-linear-gradient(top, $startColor, $endColor); // Opera 11.10
    background-image: linear-gradient(to bottom, $startColor, $endColor); // Standard, IE10
    background-repeat: repeat-x;
//    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb($startColor),argb($endColor))); // IE9 and down
}
@mixin gradient-directional($startColor: #555, $endColor: #333, $deg: 45deg) {
    background-color: $endColor;
    background-repeat: repeat-x;
    background-image: -moz-linear-gradient($deg, $startColor, $endColor); // FF 3.6+
    background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1+, Chrome 10+
    background-image: -o-linear-gradient($deg, $startColor, $endColor); // Opera 11.10
    background-image: linear-gradient($deg, $startColor, $endColor); // Standard, IE10
}
@mixin gradient-horizontal-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
    background-color: mix($midColor, $endColor, 80%);
    background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
    background-image: -webkit-linear-gradient(left, $startColor, $midColor $colorStop, $endColor);
    background-image: -moz-linear-gradient(left, $startColor, $midColor $colorStop, $endColor);
    background-image: -o-linear-gradient(left, $startColor, $midColor $colorStop, $endColor);
    background-image: linear-gradient(to right, $startColor, $midColor $colorStop, $endColor);
    background-repeat: no-repeat;
//    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb($startColor),argb($endColor))); // IE9 and down, gets no color-stop at all for proper fallback
}

@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
    background-color: mix($midColor, $endColor, 80%);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
    background-image: -webkit-linear-gradient($startColor, $midColor $colorStop, $endColor);
    background-image: -moz-linear-gradient(top, $startColor, $midColor $colorStop, $endColor);
    background-image: -o-linear-gradient($startColor, $midColor $colorStop, $endColor);
    background-image: linear-gradient($startColor, $midColor $colorStop, $endColor);
    background-repeat: no-repeat;
//    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb($startColor),argb($endColor))); // IE9 and down
}
@mixin gradient-radial($innerColor: #555, $outerColor: #333) {
    background-color: $outerColor;
    background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
    background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
    background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
    background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
    background-repeat: no-repeat;
}


// Reset IE Filters

@mixin reset-filter() {
//    filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}


// Opacity

@mixin opacity($factor){
    opacity: $factor;
    $iefactor: $factor*100;
    filter: alpha(opacity=$iefactor);
}

// Transforms

@mixin transform($args) {
    -webkit-transform: $args; 
    -moz-transform: $args; 
    -ms-transform: $args; 
    -o-transform: $args; 
    transform: $args;
}
@mixin translateHardware($x,$y){
    @include translate($x,$y);
    -webkit-transform: translate3d($x,$y,0);
    -moz-transform: translate3d($x,$y,0);
}

// Transitions

@mixin transition($args:200ms) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -o-transition: $args;
    transition: $args;
}
@mixin transition-delay($delay:0) {
    -webkit-transition-delay: $delay;
    -moz-transition-delay: $delay;
    -o-transition-delay: $delay;
    transition-delay: $delay;
}
@mixin transition-duration($duration:200ms) {
    -webkit-transition-duration: $duration;
    -moz-transition-duration: $duration;
    -o-transition-duration: $duration;
    transition-duration: $duration;
}
@mixin transition-property($property:all) {
    -webkit-transition-property: $property;
    -moz-transition-property: $property;
    -o-transition-property: $property;
    transition-property: $property;
}
@mixin transition-timing-function($function:ease) {
    -webkit-transition-timing-function: $function;
    -moz-transition-timing-function: $function;
    -o-transition-timing-function: $function;
    transition-timing-function: $function;
}

// Extra Helper mixins

.group{
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

// Border-box for everything

*, *:before, *:after{
    box-sizing: border-box;
}

// Create a $baseline variable, calculated in pixels equal to the gutterWidth.

// Useful for horizontal spacing and vertical rhythm, with a fallback of 15px.

// The function is called in _layout.scss.

@function baseline(){
    $baselineHeight: $gutterWidth;
    // for _mobile.scss
    @if $baselineHeight != 0%{
        @return $baselineHeight
    }@else{
        @return 15px
    }
}

@function columnwidth(){
    @return stripUnits($columnSize)*1px
}
